/**
 * BRIDGE MODULE - Transition vers physics_relativistic
 * Phase 3 - Compatibilit√© avec l'application existante
 * 
 * Ce module adapte les nouvelles fonctions de physics_relativistic
 * pour maintenir la compatibilit√© avec l'interface existante
 */

import {
    // Nouvelles fonctions de physics_relativistic
    solveRendezvousProblem,
    generateTrajectory,
    validateTrajectory,
    SPEED_OF_LIGHT as C,
    TAU_SAMPLES
} from '../physics_relativistic/index.js';

/**
 * Calcule une trajectoire d'acc√©l√©ration relativiste entre deux points
 * Interface de compatibilit√© avec l'ancien syst√®me
 * @param {Object} fromCone - Point de d√©part {x, t, ...}
 * @param {Object} toCone - Point d'arriv√©e {x, t, ...}
 * @param {number} initialVelocity - Vitesse initiale (optionnelle)
 * @returns {Array} Tableau de points {x, t} de la trajectoire (format ancien)
 */
export function calculateAccelerationTrajectory(fromCone, toCone, initialVelocity = 0) {
    try {
        console.log('üöÄüöÄüöÄ BRIDGE ACTIV√â ! üöÄüöÄüöÄ');
        console.log('üîß BRIDGE: Utilisation du nouveau module physics_relativistic');
        console.log('üîß BRIDGE: Param√®tres:', { fromCone, toCone, initialVelocity });
        
        // R√©solution du probl√®me de rendez-vous avec le nouveau syst√®me
        const rendezvous = solveRendezvousProblem(
            fromCone.x, fromCone.t, initialVelocity,
            toCone.x, toCone.t
        );
        
        // G√©n√©ration de la trajectoire avec le nouveau syst√®me
        const trajectory = generateTrajectory(
            fromCone.x, fromCone.t, initialVelocity,
            rendezvous.alpha, rendezvous.tau_f
        );
        
        // Conversion au format attendu par l'application existante
        return trajectory.map(point => ({
            x: point.x,
            t: point.t,
            // Ajout des nouvelles donn√©es pour compatibilit√© future
            v: point.v,
            gamma: point.gamma,
            phi: point.phi,
            tau: point.tau,
            // Donn√©es du rendez-vous pour les cartouches
            rendezvous: rendezvous
        }));
        
    } catch (error) {
        console.warn('Erreur dans calculateAccelerationTrajectory:', error.message);
        
        // Retourner une trajectoire vide en cas d'erreur (pas de fallback)
        // Cela permet de d√©tecter les probl√®mes de causalit√©
        return [];
    }
}

/**
 * Calcule les points d'une isochrone (surface de temps propre constant)
 * Interface de compatibilit√© avec l'ancien syst√®me
 * @param {number} tau - Temps propre de l'isochrone
 * @param {Object} origin - Point d'origine {x, t, ...}
 * @param {Object} selectedCone - C√¥ne s√©lectionn√© pour calibration
 * @param {number} canvasWidth - Largeur du canvas pour calculer les bornes
 * @returns {Array} Tableau de points {x, t} de l'isochrone
 */
export function calculateIsochronePoints(tau, origin, selectedCone, canvasWidth) {
    // Pour l'instant, on garde l'ancienne impl√©mentation des isochrones
    // car elles ne sont pas directement li√©es aux trajectoires de rendez-vous
    const points = [];
    const c = C;
    
    // Calcul des bornes d'√©cran
    const centerX = canvasWidth / 2;
    const scale = 2;
    const maxScreenX = canvasWidth;
    const minScreenX = 0;
    
    // Conversion bornes √©cran ‚Üí coordonn√©es espace-temps
    const maxSpatialExtent = (maxScreenX - centerX) / scale;
    const minSpatialExtent = (minScreenX - centerX) / scale;
    
    // Extension au-del√† de l'√©cran pour des courbes lisses
    const margin = 50;
    const xMin = minSpatialExtent - margin;
    const xMax = maxSpatialExtent + margin;
    
    if (xMax <= xMin) return [];
    
    const step = Math.max(1, Math.abs(xMax - xMin) / 500);
    
    // Facteur de calibration pour l'isochrone
    let tauCalibration = 1.0;
    
    if (selectedCone) {
        const deltaX_selected = selectedCone.x - origin.x;
        const deltaT_selected = selectedCone.t - origin.t;
        const t_formula = Math.sqrt(tau * tau + (deltaX_selected * deltaX_selected) / (c * c));
        
        if (t_formula > 0 && deltaT_selected > 0) {
            tauCalibration = deltaT_selected / t_formula;
        }
    }
    
    // G√©n√©ration des points de l'isochrone
    for (let x = xMin; x <= xMax; x += step) {
        const deltaX = x - origin.x;
        
        // Formule de l'isochrone : t = ‚àö(œÑ¬≤ + (Œîx/c)¬≤)
        const t_formula = Math.sqrt(tau * tau + (deltaX * deltaX) / (c * c));
        const t = origin.t + t_formula * tauCalibration;
        
        // V√©rification que le point est dans le futur
        if (t > origin.t) {
            points.push({ x: x, t: t });
        }
    }
    
    return points;
}

/**
 * D√©termine quel c√¥ne contient un point donn√©
 * Interface de compatibilit√© avec l'ancien syst√®me
 * @param {number} x - Position spatiale
 * @param {number} t - Temps coordonn√©e  
 * @param {Array} coneOrigins - Tableau des c√¥nes
 * @returns {number} Index du c√¥ne contenant le point, ou -1 si aucun
 */
export function getContainingCone(x, t, coneOrigins) {
    // V√©rifier les c√¥nes dans l'ordre inverse (les plus r√©cents d'abord)
    for (let i = coneOrigins.length - 1; i >= 0; i--) {
        const cone = coneOrigins[i];
        
        // Position relative par rapport au c√¥ne
        const relativeX = x - cone.x;
        const relativeT = t - cone.t;
        
        // Le point doit √™tre dans le futur de ce c√¥ne
        if (relativeT > 0) {
            // V√©rifier si le point est dans le c√¥ne de lumi√®re
            const spatialDistance = Math.abs(relativeX);
            const lightConeRadius = relativeT * C;
            
            if (spatialDistance <= lightConeRadius) {
                return i; // Point trouv√© dans ce c√¥ne
            }
        }
    }
    
    return -1; // Point en dehors de tous les c√¥nes
}

/**
 * Fonction de fallback pour g√©n√©rer une trajectoire simple
 * Utilis√©e en cas d'erreur avec le nouveau syst√®me
 * @param {Object} fromCone - Point de d√©part
 * @param {Object} toCone - Point d'arriv√©e
 * @param {number} initialVelocity - Vitesse initiale
 * @returns {Array} Trajectoire simple
 */
function generateSimpleTrajectory(fromCone, toCone, initialVelocity) {
    const trajectory = [];
    const steps = 50;
    
    for (let i = 0; i <= steps; i++) {
        const t = fromCone.t + (toCone.t - fromCone.t) * (i / steps);
        const x = fromCone.x + (toCone.x - fromCone.x) * (i / steps);
        
        trajectory.push({ x, t });
    }
    
    return trajectory;
}

/**
 * Extrait les informations de rendez-vous d'une trajectoire
 * Utile pour les cartouches d'information
 * @param {Array} trajectory - Trajectoire g√©n√©r√©e
 * @returns {Object|null} Informations de rendez-vous ou null
 */
export function getRendezvousInfo(trajectory) {
    if (trajectory.length > 0 && trajectory[0].rendezvous) {
        return trajectory[0].rendezvous;
    }
    return null;
}

/**
 * Valide une trajectoire avec le nouveau syst√®me
 * @param {Array} trajectory - Trajectoire √† valider
 * @returns {Object} R√©sultat de validation
 */
export function validateTrajectoryWithNewSystem(trajectory) {
    // Convertir au format attendu par validateTrajectory
    const formattedTrajectory = trajectory.map(point => ({
        x: point.x,
        t: point.t,
        v: point.v || 0,
        gamma: point.gamma || 1,
        phi: point.phi || 0,
        tau: point.tau || 0
    }));
    
    return validateTrajectory(formattedTrajectory);
} 